"""
This is a Python script that serves as the starting point for a web application using FastAPI.
FastAPI is a modern, fast web framework for building APIs with Python 3.7+ based on standard Python type hints.

This script does several things:
1. Sets up the web application with some basic information like its name and version.
2. Connects parts of the application that handle different tasks or sections of the website (known as routing).
3. Customizes how the application's API will appear in the auto-generated documentation.
4. Redirects anyone visiting the base URL of the website to the API documentation page.

You can run this script using a command-line tool like Uvicorn, which is a server that lets your application talk to web browsers.
"""

# Here we import some pieces of code from FastAPI and other places in our project that we need.
from typing import Annotated
from fastapi import FastAPI, HTTPException, Depends, Header, Request# FastAPI library to create our application
from fastapi.responses import RedirectResponse, PlainTextResponse, HTMLResponse  # FastAPI utility to handle redirections and return plain text for privacy policy
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from .routes import router  # Importing 'router' which handles different web pages/sections from another file
from .config import custom_openapi  # Importing a custom function to change the default setup of our API documentation
from firebase_admin import auth
import firebase_admin  # Firebase Admin SDK to handle authentication and other Firebase services
from firebase_admin import credentials
from app.auth import verify_firebase_token  

# Creating an instance of FastAPI which starts our application.
app = FastAPI(
    title="My API",  # This is the name of our web application.
    version="1.0.0",  # This indicates the version of the application, useful for updates and referencing.
)


# Mount the 'static' directory to serve CSS, JS, images (optional)
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# Initialize Jinja2 templates
templates = Jinja2Templates(directory="app/templates")


# Initialize Firebase Admin SDK
# Since you're deploying to Cloud Run, the service will automatically use Application Default Credentials (ADC)
# provided by the platform, so there's no need to manually pass credentials here.
cred = credentials.ApplicationDefault()  # Use Application Default Credentials if running on Google Cloud
firebase_admin.initialize_app(cred)


# Here we tell our FastAPI app to use the 'router' we imported, which includes definitions for different web pages.
app.include_router(router)

# Assigning a custom function to modify how our API's documentation is automatically generated by FastAPI.
app.openapi = custom_openapi(app)


# Route to serve the login page
@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

# Route for protected dashboard, requires authentication
@app.get("/dashboard")
async def dashboard(user_info: dict = Depends(verify_firebase_token)):
    # The user_info comes from the Firebase token validation
    return {"message": "Welcome to your dashboard!", "user": user_info}

# A function to redirect visitors from the base URL ("/") to the documentation page ("/docs").
@app.get(
    "/", include_in_schema=False
)  # We set 'include_in_schema=False' so this redirection won't appear in the API docs.
async def redirect_to_docs():
    """
    This function handles anyone who comes to the very beginning (root) of our website.
    Instead of showing them a blank page, we send them directly to '/docs' where they can see our API documentation.
    This is helpful for users who might be looking for information on how to use the API.
    """
    return RedirectResponse(
        url="/docs"
    )  # This line does the actual redirecting to the '/docs' page.

# A function to provide a privacy policy to ChatGPT to allow us to make our Custom GPT public
@app.get("/privacy", response_class=PlainTextResponse)
async def get_privacy_policy():
    return """
    Privacy Policy

    This is the privacy policy for our application. We respect your privacy and ensure that your data is protected. 
    We do not share personal information with third parties, except as necessary to provide our services.
    """

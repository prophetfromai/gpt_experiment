# Define substitutions at the top
substitutions:
  _APP_NAME: 'zactestnew'
  _REGION: 'us-west2'
  _DEPLOYER_SERVICE_ACCOUNT: 'cloud-run-deployer@zac-test-app-run.iam.gserviceaccount.com'
  _RUNTIME_SERVICE_ACCOUNT: 'app-runtime-sa@zac-test-app-run.iam.gserviceaccount.com'

steps:
  # Step 1: Ensure the deployer service account has the necessary roles
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Set required IAM roles for the deployer service account
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:${_DEPLOYER_SERVICE_ACCOUNT}" \
          --role="roles/run.admin"

        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:${_DEPLOYER_SERVICE_ACCOUNT}" \
          --role="roles/iam.serviceAccountUser"

  # Step 2: Ensure the runtime service account has the necessary roles
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Set required IAM roles for the runtime service account
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:${_RUNTIME_SERVICE_ACCOUNT}" \
          --role="roles/run.invoker"

        # Add any other roles the runtime service account needs, e.g., access to Cloud Storage
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:${_RUNTIME_SERVICE_ACCOUNT}" \
          --role="roles/storage.objectViewer"

  # Step 3: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_APP_NAME}:latest', '.']

  # Step 4: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_APP_NAME}:latest']

  # Step 5: Deploy the Docker image to Google Cloud Run with the runtime service account
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud run deploy ${_APP_NAME} \
        --image gcr.io/$PROJECT_ID/${_APP_NAME}:latest \
        --platform managed \
        --region ${_REGION} \
        --allow-unauthenticated \
        --service-account=${_RUNTIME_SERVICE_ACCOUNT}

  # Step 6: Update the environment variable using the canonical service URL directly
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud run services update ${_APP_NAME} \
        --platform managed \
        --region ${_REGION} \
        --update-env-vars BASE_URL=$(gcloud run services describe ${_APP_NAME} --platform managed --region ${_REGION} --format="value(metadata.annotations['run.googleapis.com/urls'])" | sed 's/\[//g' | sed 's/\]//g' | cut -d ',' -f 1 | sed 's/"//g')

images:
- 'gcr.io/$PROJECT_ID/${_APP_NAME}:latest'

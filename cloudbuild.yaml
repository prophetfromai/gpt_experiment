# Substitutions are variables used throughout this configuration file to make it easier to customize and reuse.
substitutions:
  _APP_NAME: 'your-app-name'  # Placeholder for your application's name, replace 'your-app-name' with the actual name.
  _REGION: 'us-west2'  # Defines the Google Cloud region where the application will be deployed.

# Steps outline the sequence of actions that will be performed by the CI/CD pipeline.
steps:
  # Step 0: Lint the code using Pylint
  - name: 'python:3.12-slim'  # Uses a slim version of Python 3.12 Docker image to perform the task.
    entrypoint: 'bash'  # Specifies that the following commands should be executed in a Bash shell.
    args:
      - '-c'
      - |
        pip install pylint  # Installs Pylint, a Python linter tool to check for syntax and style issues.
        pip install -r requirements.txt  # Installs all the Python packages required by the application as specified in the requirements.txt file.
        # Runs Pylint to analyze the code for errors only, configured via a .pylintrc file.
        pylint --rcfile=.pylintrc app/*.py start.py  

  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'  # Uses the Docker builder from Google Cloud Build.
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_APP_NAME}:$BUILD_ID', '.']  # Builds a Docker image from the Dockerfile in the current directory.
    # The image is tagged with the Google Cloud project ID, the application name, and the build ID.

  # Step 2: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_APP_NAME}:$BUILD_ID']  # Pushes the Docker image to Google Container Registry.
    # This step makes the image available for deployment in the cloud.

  # Step 3: Deploy the Docker image to Google Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'  # Uses Google Cloud SDK Docker image.
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Command to deploy the application to Google Cloud Run.
        gcloud run deploy ${_APP_NAME} \
          --image gcr.io/$PROJECT_ID/${_APP_NAME}:$BUILD_ID \
          --platform managed \
          --region ${_REGION} \
          --allow-unauthenticated  # The service will be accessible without authentication.

  # Step 4: Update the environment variable using the canonical service URL directly
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      # Updates an environment variable for the deployed service.
      gcloud run services update ${_APP_NAME} \
        --platform managed \
        --region ${_REGION} \
        --update-env-vars BASE_URL=$(gcloud run services describe ${_APP_NAME} --platform managed --region ${_REGION} --format="value(metadata.annotations['run.googleapis.com/urls'])" | sed 's/\[//g' | sed 's/\]//g' | cut -d ',' -f 1 | sed 's/"//g')
      # This command extracts the service URL and sets it as an environment variable, making it easier to integrate with other services or for debugging purposes.


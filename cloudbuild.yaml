substitutions:
  _APP_NAME: 'your-app-name'
  _REGION: 'us-west2'

steps:
  # Step 0: Lint the code using Pylint
  - name: 'python:3.12-slim'  # Use an official Python image
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install pylint  # Install Pylint
        pip install -r requirements.txt
        # Run Pylint in errors-only mode
        pylint --rcfile=.pylintrc app/*.py start.py

  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_APP_NAME}:$BUILD_ID', '.']

  # Step 2: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_APP_NAME}:$BUILD_ID']

# Step 3: Deploy the Docker image to Google Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_APP_NAME}'
      - '--image'
      - 'gcr.io/$PROJECT_ID/${_APP_NAME}:$BUILD_ID'
      - '--platform'
      - 'managed'
      - '--region'
      - '${_REGION}'
      - '--allow-unauthenticated'

  # Step 4: Update the environment variable using the canonical service URL directly
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud run services update ${_APP_NAME} \
        --platform managed \
        --region ${_REGION} \
        --update-env-vars BASE_URL=$(gcloud run services describe ${_APP_NAME} --platform managed --region ${_REGION} --format="value(metadata.annotations['run.googleapis.com/urls'])" | sed 's/\[//g' | sed 's/\]//g' | cut -d ',' -f 1 | sed 's/"//g')

